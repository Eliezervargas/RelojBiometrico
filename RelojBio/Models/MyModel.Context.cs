//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RelojBio.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RELOJBIOEntities : DbContext
    {
        public RELOJBIOEntities()
            : base("name=RELOJBIOEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Break> Break { get; set; }
        public virtual DbSet<BreakShift> BreakShift { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<CostCenter> CostCenter { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DayDetails> DayDetails { get; set; }
        public virtual DbSet<DaySummary> DaySummary { get; set; }
        public virtual DbSet<HolidayCompany> HolidayCompany { get; set; }
        public virtual DbSet<HolidayDepartment> HolidayDepartment { get; set; }
        public virtual DbSet<HolidayDetails> HolidayDetails { get; set; }
        public virtual DbSet<HolidayEmployee> HolidayEmployee { get; set; }
        public virtual DbSet<HolidayType> HolidayType { get; set; }
        public virtual DbSet<ManualDialing> ManualDialing { get; set; }
        public virtual DbSet<Parameter> Parameter { get; set; }
        public virtual DbSet<Permision> Permision { get; set; }
        public virtual DbSet<PermisionType> PermisionType { get; set; }
        public virtual DbSet<Punches> Punches { get; set; }
        public virtual DbSet<PunchesLocked> PunchesLocked { get; set; }
        public virtual DbSet<PunchType> PunchType { get; set; }
        public virtual DbSet<Schedule> Schedule { get; set; }
        public virtual DbSet<ScheduleDetails> ScheduleDetails { get; set; }
        public virtual DbSet<Shift> Shift { get; set; }
        public virtual DbSet<ShiftRoundrule> ShiftRoundrule { get; set; }
        public virtual DbSet<ShiftType> ShiftType { get; set; }
        public virtual DbSet<Signing> Signing { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Terminal> Terminal { get; set; }
        public virtual DbSet<TerminalEvents> TerminalEvents { get; set; }
        public virtual DbSet<TerminalParameter> TerminalParameter { get; set; }
        public virtual DbSet<WorkCode> WorkCode { get; set; }
        public virtual DbSet<WorkState> WorkState { get; set; }
        public virtual DbSet<Sequential> Sequential { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Action> Action { get; set; }
        public virtual DbSet<Company1> Company1 { get; set; }
        public virtual DbSet<CompanyModule> CompanyModule { get; set; }
        public virtual DbSet<Component> Component { get; set; }
        public virtual DbSet<Module> Module { get; set; }
        public virtual DbSet<ModuleOption> ModuleOption { get; set; }
        public virtual DbSet<Operation> Operation { get; set; }
        public virtual DbSet<Option> Option { get; set; }
        public virtual DbSet<OptionOperation> OptionOperation { get; set; }
        public virtual DbSet<Permision1> Permision1 { get; set; }
        public virtual DbSet<Procedure> Procedure { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleOption> RoleOption { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserCompany> UserCompany { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
    
        public virtual ObjectResult<rptControlAssistance_Result> rptControlAssistance(string user, string station, string action, Nullable<int> employeeId, string departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptControlAssistance_Result>("rptControlAssistance", userParameter, stationParameter, actionParameter, employeeIdParameter, departmentIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptControlAssistance_V2_Result> rptControlAssistance_V2(string user, string station, string action, Nullable<int> employeeId, string departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptControlAssistance_V2_Result>("rptControlAssistance_V2", userParameter, stationParameter, actionParameter, employeeIdParameter, departmentIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptControlBreak_Result> rptControlBreak(string user, string station, string action, Nullable<int> employeeId, string departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptControlBreak_Result>("rptControlBreak", userParameter, stationParameter, actionParameter, employeeIdParameter, departmentIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptControlPunches_Result> rptControlPunches(string user, string station, string action, Nullable<System.DateTime> startDate, Nullable<System.DateTime> finalDate, string departmentID, Nullable<int> employeeID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var finalDateParameter = finalDate.HasValue ?
                new ObjectParameter("FinalDate", finalDate) :
                new ObjectParameter("FinalDate", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptControlPunches_Result>("rptControlPunches", userParameter, stationParameter, actionParameter, startDateParameter, finalDateParameter, departmentIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<rptControlSigning_Result> rptControlSigning(string user, string station, string action, Nullable<int> employeeId, string costCenterId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var costCenterIdParameter = costCenterId != null ?
                new ObjectParameter("CostCenterId", costCenterId) :
                new ObjectParameter("CostCenterId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptControlSigning_Result>("rptControlSigning", userParameter, stationParameter, actionParameter, employeeIdParameter, costCenterIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptDialTracking_Result> rptDialTracking(string user, string station, string action, Nullable<int> employeeId, string departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isInserted, Nullable<bool> isModified, Nullable<bool> isRemoved)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isInsertedParameter = isInserted.HasValue ?
                new ObjectParameter("IsInserted", isInserted) :
                new ObjectParameter("IsInserted", typeof(bool));
    
            var isModifiedParameter = isModified.HasValue ?
                new ObjectParameter("IsModified", isModified) :
                new ObjectParameter("IsModified", typeof(bool));
    
            var isRemovedParameter = isRemoved.HasValue ?
                new ObjectParameter("IsRemoved", isRemoved) :
                new ObjectParameter("IsRemoved", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptDialTracking_Result>("rptDialTracking", userParameter, stationParameter, actionParameter, employeeIdParameter, departmentIdParameter, startDateParameter, endDateParameter, isInsertedParameter, isModifiedParameter, isRemovedParameter);
        }
    
        public virtual ObjectResult<rptExceptionTracking_Result> rptExceptionTracking(string user, string station, string action, Nullable<int> employeeId, string departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptExceptionTracking_Result>("rptExceptionTracking", userParameter, stationParameter, actionParameter, employeeIdParameter, departmentIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spBreak(string user, string station, string action, Nullable<int> breakID, string name, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<bool> deduct, Nullable<bool> autoDeduct, Nullable<int> deductMinute, Nullable<int> maxLong, Nullable<int> minLong, Nullable<int> overcountPaycode, Nullable<bool> overcount, Nullable<bool> needCheck, string remark, string modeFind, Nullable<int> shiftID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var breakIDParameter = breakID.HasValue ?
                new ObjectParameter("BreakID", breakID) :
                new ObjectParameter("BreakID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            var deductParameter = deduct.HasValue ?
                new ObjectParameter("Deduct", deduct) :
                new ObjectParameter("Deduct", typeof(bool));
    
            var autoDeductParameter = autoDeduct.HasValue ?
                new ObjectParameter("AutoDeduct", autoDeduct) :
                new ObjectParameter("AutoDeduct", typeof(bool));
    
            var deductMinuteParameter = deductMinute.HasValue ?
                new ObjectParameter("DeductMinute", deductMinute) :
                new ObjectParameter("DeductMinute", typeof(int));
    
            var maxLongParameter = maxLong.HasValue ?
                new ObjectParameter("MaxLong", maxLong) :
                new ObjectParameter("MaxLong", typeof(int));
    
            var minLongParameter = minLong.HasValue ?
                new ObjectParameter("MinLong", minLong) :
                new ObjectParameter("MinLong", typeof(int));
    
            var overcountPaycodeParameter = overcountPaycode.HasValue ?
                new ObjectParameter("OvercountPaycode", overcountPaycode) :
                new ObjectParameter("OvercountPaycode", typeof(int));
    
            var overcountParameter = overcount.HasValue ?
                new ObjectParameter("Overcount", overcount) :
                new ObjectParameter("Overcount", typeof(bool));
    
            var needCheckParameter = needCheck.HasValue ?
                new ObjectParameter("NeedCheck", needCheck) :
                new ObjectParameter("NeedCheck", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spBreak", userParameter, stationParameter, actionParameter, breakIDParameter, nameParameter, startParameter, endParameter, deductParameter, autoDeductParameter, deductMinuteParameter, maxLongParameter, minLongParameter, overcountPaycodeParameter, overcountParameter, needCheckParameter, remarkParameter, modeFindParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spBreakShift(string user, string station, string action, Nullable<int> breakShiftID, Nullable<int> breakID, Nullable<int> shiftID, string remark, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var breakShiftIDParameter = breakShiftID.HasValue ?
                new ObjectParameter("BreakShiftID", breakShiftID) :
                new ObjectParameter("BreakShiftID", typeof(int));
    
            var breakIDParameter = breakID.HasValue ?
                new ObjectParameter("BreakID", breakID) :
                new ObjectParameter("BreakID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spBreakShift", userParameter, stationParameter, actionParameter, breakShiftIDParameter, breakIDParameter, shiftIDParameter, remarkParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<spCity_Result> spCity(string user, string station, string action, Nullable<int> cityID, Nullable<int> stateID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCity_Result>("spCity", userParameter, stationParameter, actionParameter, cityIDParameter, stateIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCostCenter(string user, string station, string action, Nullable<int> costCenterID, string code, string name, string description, Nullable<bool> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var costCenterIDParameter = costCenterID.HasValue ?
                new ObjectParameter("CostCenterID", costCenterID) :
                new ObjectParameter("CostCenterID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCostCenter", userParameter, stationParameter, actionParameter, costCenterIDParameter, codeParameter, nameParameter, descriptionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<spCountry_Result> spCountry(string user, string station, string action, Nullable<int> countryID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCountry_Result>("spCountry", userParameter, stationParameter, actionParameter, countryIDParameter);
        }
    
        public virtual ObjectResult<spExtractorRegister_Result> spExtractorRegister(string user, string station, string action, Nullable<int> employeeId, string departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var departmentIdParameter = departmentId != null ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spExtractorRegister_Result>("spExtractorRegister", userParameter, stationParameter, actionParameter, employeeIdParameter, departmentIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spHolidayCompany(string user, string station, string action, Nullable<int> holidayCompanyID, Nullable<int> holidayDetailsID, Nullable<int> companyID, Nullable<bool> disable, string remark, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var holidayCompanyIDParameter = holidayCompanyID.HasValue ?
                new ObjectParameter("HolidayCompanyID", holidayCompanyID) :
                new ObjectParameter("HolidayCompanyID", typeof(int));
    
            var holidayDetailsIDParameter = holidayDetailsID.HasValue ?
                new ObjectParameter("HolidayDetailsID", holidayDetailsID) :
                new ObjectParameter("HolidayDetailsID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var disableParameter = disable.HasValue ?
                new ObjectParameter("Disable", disable) :
                new ObjectParameter("Disable", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spHolidayCompany", userParameter, stationParameter, actionParameter, holidayCompanyIDParameter, holidayDetailsIDParameter, companyIDParameter, disableParameter, remarkParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spHolidayDepartment(string user, string station, string action, Nullable<int> holidayDepartmentID, Nullable<int> holidayDetailsID, Nullable<int> departmentID, Nullable<bool> disable, string remark)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var holidayDepartmentIDParameter = holidayDepartmentID.HasValue ?
                new ObjectParameter("HolidayDepartmentID", holidayDepartmentID) :
                new ObjectParameter("HolidayDepartmentID", typeof(int));
    
            var holidayDetailsIDParameter = holidayDetailsID.HasValue ?
                new ObjectParameter("HolidayDetailsID", holidayDetailsID) :
                new ObjectParameter("HolidayDetailsID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var disableParameter = disable.HasValue ?
                new ObjectParameter("Disable", disable) :
                new ObjectParameter("Disable", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spHolidayDepartment", userParameter, stationParameter, actionParameter, holidayDepartmentIDParameter, holidayDetailsIDParameter, departmentIDParameter, disableParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spHolidayDetails(string user, string station, string action, Nullable<int> holidayDetailsID, Nullable<int> holidayTypeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> hours, Nullable<decimal> rate, Nullable<int> year, Nullable<int> count, Nullable<int> countType, Nullable<bool> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var holidayDetailsIDParameter = holidayDetailsID.HasValue ?
                new ObjectParameter("HolidayDetailsID", holidayDetailsID) :
                new ObjectParameter("HolidayDetailsID", typeof(int));
    
            var holidayTypeIDParameter = holidayTypeID.HasValue ?
                new ObjectParameter("HolidayTypeID", holidayTypeID) :
                new ObjectParameter("HolidayTypeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var countTypeParameter = countType.HasValue ?
                new ObjectParameter("CountType", countType) :
                new ObjectParameter("CountType", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spHolidayDetails", userParameter, stationParameter, actionParameter, holidayDetailsIDParameter, holidayTypeIDParameter, startDateParameter, endDateParameter, hoursParameter, rateParameter, yearParameter, countParameter, countTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spHolidayEmployee(string user, string station, string action, Nullable<int> holidayEmployeeID, Nullable<int> holidayDetailsID, Nullable<int> employeeID, Nullable<bool> disable, string remark)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var holidayEmployeeIDParameter = holidayEmployeeID.HasValue ?
                new ObjectParameter("HolidayEmployeeID", holidayEmployeeID) :
                new ObjectParameter("HolidayEmployeeID", typeof(int));
    
            var holidayDetailsIDParameter = holidayDetailsID.HasValue ?
                new ObjectParameter("HolidayDetailsID", holidayDetailsID) :
                new ObjectParameter("HolidayDetailsID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var disableParameter = disable.HasValue ?
                new ObjectParameter("Disable", disable) :
                new ObjectParameter("Disable", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spHolidayEmployee", userParameter, stationParameter, actionParameter, holidayEmployeeIDParameter, holidayDetailsIDParameter, employeeIDParameter, disableParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spHolidayType(string user, string station, string action, Nullable<int> holidayTypeID, Nullable<int> code, string name, string desc, string hourType, string level, string remark)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var holidayTypeIDParameter = holidayTypeID.HasValue ?
                new ObjectParameter("HolidayTypeID", holidayTypeID) :
                new ObjectParameter("HolidayTypeID", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var hourTypeParameter = hourType != null ?
                new ObjectParameter("HourType", hourType) :
                new ObjectParameter("HourType", typeof(string));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spHolidayType", userParameter, stationParameter, actionParameter, holidayTypeIDParameter, codeParameter, nameParameter, descParameter, hourTypeParameter, levelParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spManualDialing(string user, string station, string action, Nullable<int> manualDialingID, Nullable<int> employeeId, string reason, Nullable<System.DateTime> registrationDate, string modeFind, Nullable<int> editedPunchId)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var manualDialingIDParameter = manualDialingID.HasValue ?
                new ObjectParameter("ManualDialingID", manualDialingID) :
                new ObjectParameter("ManualDialingID", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            var editedPunchIdParameter = editedPunchId.HasValue ?
                new ObjectParameter("EditedPunchId", editedPunchId) :
                new ObjectParameter("EditedPunchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spManualDialing", userParameter, stationParameter, actionParameter, manualDialingIDParameter, employeeIdParameter, reasonParameter, registrationDateParameter, modeFindParameter, editedPunchIdParameter);
        }
    
        public virtual ObjectResult<spParameter_Result> spParameter(string user, string station, string action, Nullable<int> parameterID, string code, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var parameterIDParameter = parameterID.HasValue ?
                new ObjectParameter("ParameterID", parameterID) :
                new ObjectParameter("ParameterID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spParameter_Result>("spParameter", userParameter, stationParameter, actionParameter, parameterIDParameter, codeParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spPermision(string user, string station, string action, Nullable<int> permisionID, Nullable<int> employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> permisionTypeID, string observation, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var permisionIDParameter = permisionID.HasValue ?
                new ObjectParameter("PermisionID", permisionID) :
                new ObjectParameter("PermisionID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var permisionTypeIDParameter = permisionTypeID.HasValue ?
                new ObjectParameter("PermisionTypeID", permisionTypeID) :
                new ObjectParameter("PermisionTypeID", typeof(int));
    
            var observationParameter = observation != null ?
                new ObjectParameter("Observation", observation) :
                new ObjectParameter("Observation", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spPermision", userParameter, stationParameter, actionParameter, permisionIDParameter, employeeIDParameter, startDateParameter, endDateParameter, permisionTypeIDParameter, observationParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spPermisionType(string user, string station, string action, Nullable<int> permisionTypeID, string description, Nullable<bool> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var permisionTypeIDParameter = permisionTypeID.HasValue ?
                new ObjectParameter("PermisionTypeID", permisionTypeID) :
                new ObjectParameter("PermisionTypeID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spPermisionType", userParameter, stationParameter, actionParameter, permisionTypeIDParameter, descriptionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSchedule(string user, string station, string action, Nullable<int> scheduleID, string name, Nullable<int> type, Nullable<bool> cycleAvailable, Nullable<bool> isPublic, Nullable<bool> cycleIncludeWeekend, Nullable<bool> cycleIncludeHoliday, Nullable<int> cycleType, Nullable<int> cycleParameter, Nullable<System.DateTime> startDate, string remark)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var cycleAvailableParameter = cycleAvailable.HasValue ?
                new ObjectParameter("CycleAvailable", cycleAvailable) :
                new ObjectParameter("CycleAvailable", typeof(bool));
    
            var isPublicParameter = isPublic.HasValue ?
                new ObjectParameter("IsPublic", isPublic) :
                new ObjectParameter("IsPublic", typeof(bool));
    
            var cycleIncludeWeekendParameter = cycleIncludeWeekend.HasValue ?
                new ObjectParameter("CycleIncludeWeekend", cycleIncludeWeekend) :
                new ObjectParameter("CycleIncludeWeekend", typeof(bool));
    
            var cycleIncludeHolidayParameter = cycleIncludeHoliday.HasValue ?
                new ObjectParameter("CycleIncludeHoliday", cycleIncludeHoliday) :
                new ObjectParameter("CycleIncludeHoliday", typeof(bool));
    
            var cycleTypeParameter = cycleType.HasValue ?
                new ObjectParameter("CycleType", cycleType) :
                new ObjectParameter("CycleType", typeof(int));
    
            var cycleParameterParameter = cycleParameter.HasValue ?
                new ObjectParameter("CycleParameter", cycleParameter) :
                new ObjectParameter("CycleParameter", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSchedule", userParameter, stationParameter, actionParameter, scheduleIDParameter, nameParameter, typeParameter, cycleAvailableParameter, isPublicParameter, cycleIncludeWeekendParameter, cycleIncludeHolidayParameter, cycleTypeParameter, cycleParameterParameter, startDateParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spScheduleDetails(string user, string station, string action, Nullable<int> scheduleDetailsID, Nullable<int> scheduleID, Nullable<int> shiftID, Nullable<System.DateTime> date, Nullable<int> available, Nullable<int> shift, Nullable<int> detailType, string remark, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var scheduleDetailsIDParameter = scheduleDetailsID.HasValue ?
                new ObjectParameter("ScheduleDetailsID", scheduleDetailsID) :
                new ObjectParameter("ScheduleDetailsID", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var availableParameter = available.HasValue ?
                new ObjectParameter("Available", available) :
                new ObjectParameter("Available", typeof(int));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var detailTypeParameter = detailType.HasValue ?
                new ObjectParameter("DetailType", detailType) :
                new ObjectParameter("DetailType", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spScheduleDetails", userParameter, stationParameter, actionParameter, scheduleDetailsIDParameter, scheduleIDParameter, shiftIDParameter, dateParameter, availableParameter, shiftParameter, detailTypeParameter, remarkParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spShift(string user, string station, string action, Nullable<int> shiftID, Nullable<int> shiftTypeID, Nullable<bool> flexible, string name, Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> beforeStart, Nullable<int> afterEnd, Nullable<int> beforeStart2, Nullable<int> afterEnd2, Nullable<bool> late, Nullable<int> lateCome, Nullable<bool> early, Nullable<int> earlyOut, Nullable<int> earlyCome, Nullable<int> lateOut, Nullable<bool> shiftRound, Nullable<int> checkInRoundValue, Nullable<int> checkOutRoundValue, Nullable<int> checkInRoundDown, Nullable<int> checkOutRoundDown, Nullable<int> absent, Nullable<int> color, string remark, Nullable<bool> allowBefore, Nullable<bool> allowAfter, string code, string modeFind, Nullable<int> breakID, Nullable<System.DateTime> rangeStartIni, Nullable<System.DateTime> rangeStartFin, Nullable<System.DateTime> rangeEndIni, Nullable<System.DateTime> rangeEndFin)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var shiftTypeIDParameter = shiftTypeID.HasValue ?
                new ObjectParameter("ShiftTypeID", shiftTypeID) :
                new ObjectParameter("ShiftTypeID", typeof(int));
    
            var flexibleParameter = flexible.HasValue ?
                new ObjectParameter("Flexible", flexible) :
                new ObjectParameter("Flexible", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            var beforeStartParameter = beforeStart.HasValue ?
                new ObjectParameter("BeforeStart", beforeStart) :
                new ObjectParameter("BeforeStart", typeof(int));
    
            var afterEndParameter = afterEnd.HasValue ?
                new ObjectParameter("AfterEnd", afterEnd) :
                new ObjectParameter("AfterEnd", typeof(int));
    
            var beforeStart2Parameter = beforeStart2.HasValue ?
                new ObjectParameter("BeforeStart2", beforeStart2) :
                new ObjectParameter("BeforeStart2", typeof(int));
    
            var afterEnd2Parameter = afterEnd2.HasValue ?
                new ObjectParameter("AfterEnd2", afterEnd2) :
                new ObjectParameter("AfterEnd2", typeof(int));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(bool));
    
            var lateComeParameter = lateCome.HasValue ?
                new ObjectParameter("LateCome", lateCome) :
                new ObjectParameter("LateCome", typeof(int));
    
            var earlyParameter = early.HasValue ?
                new ObjectParameter("Early", early) :
                new ObjectParameter("Early", typeof(bool));
    
            var earlyOutParameter = earlyOut.HasValue ?
                new ObjectParameter("EarlyOut", earlyOut) :
                new ObjectParameter("EarlyOut", typeof(int));
    
            var earlyComeParameter = earlyCome.HasValue ?
                new ObjectParameter("EarlyCome", earlyCome) :
                new ObjectParameter("EarlyCome", typeof(int));
    
            var lateOutParameter = lateOut.HasValue ?
                new ObjectParameter("LateOut", lateOut) :
                new ObjectParameter("LateOut", typeof(int));
    
            var shiftRoundParameter = shiftRound.HasValue ?
                new ObjectParameter("ShiftRound", shiftRound) :
                new ObjectParameter("ShiftRound", typeof(bool));
    
            var checkInRoundValueParameter = checkInRoundValue.HasValue ?
                new ObjectParameter("CheckInRoundValue", checkInRoundValue) :
                new ObjectParameter("CheckInRoundValue", typeof(int));
    
            var checkOutRoundValueParameter = checkOutRoundValue.HasValue ?
                new ObjectParameter("CheckOutRoundValue", checkOutRoundValue) :
                new ObjectParameter("CheckOutRoundValue", typeof(int));
    
            var checkInRoundDownParameter = checkInRoundDown.HasValue ?
                new ObjectParameter("CheckInRoundDown", checkInRoundDown) :
                new ObjectParameter("CheckInRoundDown", typeof(int));
    
            var checkOutRoundDownParameter = checkOutRoundDown.HasValue ?
                new ObjectParameter("CheckOutRoundDown", checkOutRoundDown) :
                new ObjectParameter("CheckOutRoundDown", typeof(int));
    
            var absentParameter = absent.HasValue ?
                new ObjectParameter("Absent", absent) :
                new ObjectParameter("Absent", typeof(int));
    
            var colorParameter = color.HasValue ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var allowBeforeParameter = allowBefore.HasValue ?
                new ObjectParameter("AllowBefore", allowBefore) :
                new ObjectParameter("AllowBefore", typeof(bool));
    
            var allowAfterParameter = allowAfter.HasValue ?
                new ObjectParameter("AllowAfter", allowAfter) :
                new ObjectParameter("AllowAfter", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            var breakIDParameter = breakID.HasValue ?
                new ObjectParameter("BreakID", breakID) :
                new ObjectParameter("BreakID", typeof(int));
    
            var rangeStartIniParameter = rangeStartIni.HasValue ?
                new ObjectParameter("RangeStartIni", rangeStartIni) :
                new ObjectParameter("RangeStartIni", typeof(System.DateTime));
    
            var rangeStartFinParameter = rangeStartFin.HasValue ?
                new ObjectParameter("RangeStartFin", rangeStartFin) :
                new ObjectParameter("RangeStartFin", typeof(System.DateTime));
    
            var rangeEndIniParameter = rangeEndIni.HasValue ?
                new ObjectParameter("RangeEndIni", rangeEndIni) :
                new ObjectParameter("RangeEndIni", typeof(System.DateTime));
    
            var rangeEndFinParameter = rangeEndFin.HasValue ?
                new ObjectParameter("RangeEndFin", rangeEndFin) :
                new ObjectParameter("RangeEndFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spShift", userParameter, stationParameter, actionParameter, shiftIDParameter, shiftTypeIDParameter, flexibleParameter, nameParameter, startParameter, endParameter, beforeStartParameter, afterEndParameter, beforeStart2Parameter, afterEnd2Parameter, lateParameter, lateComeParameter, earlyParameter, earlyOutParameter, earlyComeParameter, lateOutParameter, shiftRoundParameter, checkInRoundValueParameter, checkOutRoundValueParameter, checkInRoundDownParameter, checkOutRoundDownParameter, absentParameter, colorParameter, remarkParameter, allowBeforeParameter, allowAfterParameter, codeParameter, modeFindParameter, breakIDParameter, rangeStartIniParameter, rangeStartFinParameter, rangeEndIniParameter, rangeEndFinParameter);
        }
    
        public virtual ObjectResult<spShift_V2_Result> spShift_V2(string user, string station, string action, Nullable<int> shiftID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spShift_V2_Result>("spShift_V2", userParameter, stationParameter, actionParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spShiftType(string user, string station, string action, Nullable<int> shiftTypeID, string code, string description, Nullable<bool> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var shiftTypeIDParameter = shiftTypeID.HasValue ?
                new ObjectParameter("ShiftTypeID", shiftTypeID) :
                new ObjectParameter("ShiftTypeID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spShiftType", userParameter, stationParameter, actionParameter, shiftTypeIDParameter, codeParameter, descriptionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSigning(string user, string station, string action, Nullable<int> signingID, Nullable<int> costCenterID, Nullable<int> employeeID, Nullable<System.DateTime> start, Nullable<System.DateTime> end, string observation, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var signingIDParameter = signingID.HasValue ?
                new ObjectParameter("SigningID", signingID) :
                new ObjectParameter("SigningID", typeof(int));
    
            var costCenterIDParameter = costCenterID.HasValue ?
                new ObjectParameter("CostCenterID", costCenterID) :
                new ObjectParameter("CostCenterID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            var observationParameter = observation != null ?
                new ObjectParameter("Observation", observation) :
                new ObjectParameter("Observation", typeof(string));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSigning", userParameter, stationParameter, actionParameter, signingIDParameter, costCenterIDParameter, employeeIDParameter, startParameter, endParameter, observationParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<spState_Result> spState(string user, string station, string action, Nullable<int> stateID, Nullable<int> countryID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spState_Result>("spState", userParameter, stationParameter, actionParameter, stateIDParameter, countryIDParameter);
        }
    
        public virtual int spTemplateSchedule(string user, string station, string action, Nullable<System.DateTime> fechaIni, Nullable<System.DateTime> fechaFin, Nullable<int> departmentID, string dataSetXml)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var fechaIniParameter = fechaIni.HasValue ?
                new ObjectParameter("FechaIni", fechaIni) :
                new ObjectParameter("FechaIni", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var dataSetXmlParameter = dataSetXml != null ?
                new ObjectParameter("DataSetXml", dataSetXml) :
                new ObjectParameter("DataSetXml", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTemplateSchedule", userParameter, stationParameter, actionParameter, fechaIniParameter, fechaFinParameter, departmentIDParameter, dataSetXmlParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTerminal(string user, string station, string action, Nullable<int> terminalID, Nullable<int> number, Nullable<int> status, string name, string location, Nullable<int> connectType, string connectPwd, string domainName, string tcpIp, Nullable<int> port, string serial, Nullable<int> baudrate, string type, Nullable<int> users, Nullable<int> fingerprints, Nullable<int> punches, string zem, Nullable<int> kind, Nullable<bool> isActive, string remark, Nullable<int> faces)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var terminalIDParameter = terminalID.HasValue ?
                new ObjectParameter("TerminalID", terminalID) :
                new ObjectParameter("TerminalID", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var connectTypeParameter = connectType.HasValue ?
                new ObjectParameter("ConnectType", connectType) :
                new ObjectParameter("ConnectType", typeof(int));
    
            var connectPwdParameter = connectPwd != null ?
                new ObjectParameter("ConnectPwd", connectPwd) :
                new ObjectParameter("ConnectPwd", typeof(string));
    
            var domainNameParameter = domainName != null ?
                new ObjectParameter("DomainName", domainName) :
                new ObjectParameter("DomainName", typeof(string));
    
            var tcpIpParameter = tcpIp != null ?
                new ObjectParameter("TcpIp", tcpIp) :
                new ObjectParameter("TcpIp", typeof(string));
    
            var portParameter = port.HasValue ?
                new ObjectParameter("Port", port) :
                new ObjectParameter("Port", typeof(int));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var baudrateParameter = baudrate.HasValue ?
                new ObjectParameter("Baudrate", baudrate) :
                new ObjectParameter("Baudrate", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var usersParameter = users.HasValue ?
                new ObjectParameter("Users", users) :
                new ObjectParameter("Users", typeof(int));
    
            var fingerprintsParameter = fingerprints.HasValue ?
                new ObjectParameter("Fingerprints", fingerprints) :
                new ObjectParameter("Fingerprints", typeof(int));
    
            var punchesParameter = punches.HasValue ?
                new ObjectParameter("Punches", punches) :
                new ObjectParameter("Punches", typeof(int));
    
            var zemParameter = zem != null ?
                new ObjectParameter("Zem", zem) :
                new ObjectParameter("Zem", typeof(string));
    
            var kindParameter = kind.HasValue ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var facesParameter = faces.HasValue ?
                new ObjectParameter("Faces", faces) :
                new ObjectParameter("Faces", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTerminal", userParameter, stationParameter, actionParameter, terminalIDParameter, numberParameter, statusParameter, nameParameter, locationParameter, connectTypeParameter, connectPwdParameter, domainNameParameter, tcpIpParameter, portParameter, serialParameter, baudrateParameter, typeParameter, usersParameter, fingerprintsParameter, punchesParameter, zemParameter, kindParameter, isActiveParameter, remarkParameter, facesParameter);
        }
    
        public virtual int spUploadPunches(string user, string station, string action, string dataSetXml, Nullable<int> punchesID)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var dataSetXmlParameter = dataSetXml != null ?
                new ObjectParameter("DataSetXml", dataSetXml) :
                new ObjectParameter("DataSetXml", typeof(string));
    
            var punchesIDParameter = punchesID.HasValue ?
                new ObjectParameter("PunchesID", punchesID) :
                new ObjectParameter("PunchesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUploadPunches", userParameter, stationParameter, actionParameter, dataSetXmlParameter, punchesIDParameter);
        }
    
        public virtual ObjectResult<rptCabecera_Result> rptCabecera(string user, string station, string logo)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptCabecera_Result>("rptCabecera", userParameter, stationParameter, logoParameter);
        }
    
        public virtual int spErrorDisplay(string origen, string errorMessage)
        {
            var origenParameter = origen != null ?
                new ObjectParameter("Origen", origen) :
                new ObjectParameter("Origen", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spErrorDisplay", origenParameter, errorMessageParameter);
        }
    
        public virtual int spSequential(string tabla, ObjectParameter secuencial)
        {
            var tablaParameter = tabla != null ?
                new ObjectParameter("Tabla", tabla) :
                new ObjectParameter("Tabla", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSequential", tablaParameter, secuencial);
        }
    
        public virtual ObjectResult<Nullable<int>> spCompany(string user, string station, string action, Nullable<int> companyID, string name, string code, string dateFormat, string timeFormat, Nullable<int> operationMode, string mainAddress, string alternateAddress, Nullable<int> cityID, Nullable<int> stateID, Nullable<int> countryID, string postalCode, string phone, string fax, string email, byte[] logo, string webSite, string remark)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var dateFormatParameter = dateFormat != null ?
                new ObjectParameter("DateFormat", dateFormat) :
                new ObjectParameter("DateFormat", typeof(string));
    
            var timeFormatParameter = timeFormat != null ?
                new ObjectParameter("TimeFormat", timeFormat) :
                new ObjectParameter("TimeFormat", typeof(string));
    
            var operationModeParameter = operationMode.HasValue ?
                new ObjectParameter("OperationMode", operationMode) :
                new ObjectParameter("OperationMode", typeof(int));
    
            var mainAddressParameter = mainAddress != null ?
                new ObjectParameter("MainAddress", mainAddress) :
                new ObjectParameter("MainAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("AlternateAddress", alternateAddress) :
                new ObjectParameter("AlternateAddress", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCompany", userParameter, stationParameter, actionParameter, companyIDParameter, nameParameter, codeParameter, dateFormatParameter, timeFormatParameter, operationModeParameter, mainAddressParameter, alternateAddressParameter, cityIDParameter, stateIDParameter, countryIDParameter, postalCodeParameter, phoneParameter, faxParameter, emailParameter, logoParameter, webSiteParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spDepartment(string user, string station, string action, Nullable<int> departmentID, Nullable<int> companyID, Nullable<int> scheduleID, Nullable<int> code, string name, Nullable<int> parentCode, Nullable<int> operationMode, string remark)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var parentCodeParameter = parentCode.HasValue ?
                new ObjectParameter("ParentCode", parentCode) :
                new ObjectParameter("ParentCode", typeof(int));
    
            var operationModeParameter = operationMode.HasValue ?
                new ObjectParameter("OperationMode", operationMode) :
                new ObjectParameter("OperationMode", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDepartment", userParameter, stationParameter, actionParameter, departmentIDParameter, companyIDParameter, scheduleIDParameter, codeParameter, nameParameter, parentCodeParameter, operationModeParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spEmployee(string user, string station, string action, Nullable<int> employeeID, Nullable<int> departmentID, Nullable<int> scheduleID, Nullable<int> pin, string code, string firstName, string lastName, Nullable<decimal> salary, string phone, byte[] photo, Nullable<System.DateTime> hireDate, string mainAddress, string alternateAddress, Nullable<bool> isActive, Nullable<System.DateTime> fireDate, string fireReason, string mainEmergencyPhone, string alternateEmergencyPhone, string emergencyName, string emergencyAddress, string cardNumber, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> stateID, string postalCode, string fax, string email, string title, Nullable<decimal> hourlyRate, string gender, Nullable<System.DateTime> birthDay, Nullable<int> operationMode, string remark, string identificationNumber, Nullable<bool> earnOvertime)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var mainAddressParameter = mainAddress != null ?
                new ObjectParameter("MainAddress", mainAddress) :
                new ObjectParameter("MainAddress", typeof(string));
    
            var alternateAddressParameter = alternateAddress != null ?
                new ObjectParameter("AlternateAddress", alternateAddress) :
                new ObjectParameter("AlternateAddress", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var fireDateParameter = fireDate.HasValue ?
                new ObjectParameter("FireDate", fireDate) :
                new ObjectParameter("FireDate", typeof(System.DateTime));
    
            var fireReasonParameter = fireReason != null ?
                new ObjectParameter("FireReason", fireReason) :
                new ObjectParameter("FireReason", typeof(string));
    
            var mainEmergencyPhoneParameter = mainEmergencyPhone != null ?
                new ObjectParameter("MainEmergencyPhone", mainEmergencyPhone) :
                new ObjectParameter("MainEmergencyPhone", typeof(string));
    
            var alternateEmergencyPhoneParameter = alternateEmergencyPhone != null ?
                new ObjectParameter("AlternateEmergencyPhone", alternateEmergencyPhone) :
                new ObjectParameter("AlternateEmergencyPhone", typeof(string));
    
            var emergencyNameParameter = emergencyName != null ?
                new ObjectParameter("EmergencyName", emergencyName) :
                new ObjectParameter("EmergencyName", typeof(string));
    
            var emergencyAddressParameter = emergencyAddress != null ?
                new ObjectParameter("EmergencyAddress", emergencyAddress) :
                new ObjectParameter("EmergencyAddress", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var hourlyRateParameter = hourlyRate.HasValue ?
                new ObjectParameter("HourlyRate", hourlyRate) :
                new ObjectParameter("HourlyRate", typeof(decimal));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(System.DateTime));
    
            var operationModeParameter = operationMode.HasValue ?
                new ObjectParameter("OperationMode", operationMode) :
                new ObjectParameter("OperationMode", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var identificationNumberParameter = identificationNumber != null ?
                new ObjectParameter("IdentificationNumber", identificationNumber) :
                new ObjectParameter("IdentificationNumber", typeof(string));
    
            var earnOvertimeParameter = earnOvertime.HasValue ?
                new ObjectParameter("EarnOvertime", earnOvertime) :
                new ObjectParameter("EarnOvertime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spEmployee", userParameter, stationParameter, actionParameter, employeeIDParameter, departmentIDParameter, scheduleIDParameter, pinParameter, codeParameter, firstNameParameter, lastNameParameter, salaryParameter, phoneParameter, photoParameter, hireDateParameter, mainAddressParameter, alternateAddressParameter, isActiveParameter, fireDateParameter, fireReasonParameter, mainEmergencyPhoneParameter, alternateEmergencyPhoneParameter, emergencyNameParameter, emergencyAddressParameter, cardNumberParameter, countryIDParameter, cityIDParameter, stateIDParameter, postalCodeParameter, faxParameter, emailParameter, titleParameter, hourlyRateParameter, genderParameter, birthDayParameter, operationModeParameter, remarkParameter, identificationNumberParameter, earnOvertimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAuthorizeOptionModule(string user, string station, string action, Nullable<int> moduleOptionID, Nullable<int> optionID, Nullable<int> moduleID, Nullable<int> isActive, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var moduleOptionIDParameter = moduleOptionID.HasValue ?
                new ObjectParameter("ModuleOptionID", moduleOptionID) :
                new ObjectParameter("ModuleOptionID", typeof(int));
    
            var optionIDParameter = optionID.HasValue ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(int));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAuthorizeOptionModule", userParameter, stationParameter, actionParameter, moduleOptionIDParameter, optionIDParameter, moduleIDParameter, isActiveParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAuthorizeOptionRole(string user, string station, string action, Nullable<int> roleOptionID, Nullable<int> roleID, Nullable<int> optionID, Nullable<int> isActive, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var roleOptionIDParameter = roleOptionID.HasValue ?
                new ObjectParameter("RoleOptionID", roleOptionID) :
                new ObjectParameter("RoleOptionID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var optionIDParameter = optionID.HasValue ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAuthorizeOptionRole", userParameter, stationParameter, actionParameter, roleOptionIDParameter, roleIDParameter, optionIDParameter, isActiveParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAuthorizeUserCompany(string user, string station, string action, Nullable<int> userCompanyID, Nullable<int> userID, Nullable<int> companyID, Nullable<int> isActive, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userCompanyIDParameter = userCompanyID.HasValue ?
                new ObjectParameter("UserCompanyID", userCompanyID) :
                new ObjectParameter("UserCompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAuthorizeUserCompany", userParameter, stationParameter, actionParameter, userCompanyIDParameter, userIDParameter, companyIDParameter, isActiveParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAuthorizeUserRole(string user, string station, string action, Nullable<int> userRoleID, Nullable<int> userID, Nullable<int> roleID, Nullable<int> isActive, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAuthorizeUserRole", userParameter, stationParameter, actionParameter, userRoleIDParameter, userIDParameter, roleIDParameter, isActiveParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spComponent(string user, string station, string action, Nullable<int> componentID, string name, string container, Nullable<int> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var componentIDParameter = componentID.HasValue ?
                new ObjectParameter("ComponentID", componentID) :
                new ObjectParameter("ComponentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var containerParameter = container != null ?
                new ObjectParameter("Container", container) :
                new ObjectParameter("Container", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spComponent", userParameter, stationParameter, actionParameter, componentIDParameter, nameParameter, containerParameter, isActiveParameter);
        }
    
        public virtual int spGetAuthorization(string user, string action, string procedureName)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAuthorization", userParameter, actionParameter, procedureNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spModule(string user, string station, string action, Nullable<int> moduleID, string order, string acronym, string name, Nullable<int> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(int));
    
            var orderParameter = order != null ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(string));
    
            var acronymParameter = acronym != null ?
                new ObjectParameter("Acronym", acronym) :
                new ObjectParameter("Acronym", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spModule", userParameter, stationParameter, actionParameter, moduleIDParameter, orderParameter, acronymParameter, nameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spOption(string user, string station, string action, Nullable<int> optionID, string code, string name, string activation, Nullable<int> componentID, Nullable<int> isActive, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var optionIDParameter = optionID.HasValue ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var activationParameter = activation != null ?
                new ObjectParameter("Activation", activation) :
                new ObjectParameter("Activation", typeof(string));
    
            var componentIDParameter = componentID.HasValue ?
                new ObjectParameter("ComponentID", componentID) :
                new ObjectParameter("ComponentID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spOption", userParameter, stationParameter, actionParameter, optionIDParameter, codeParameter, nameParameter, activationParameter, componentIDParameter, isActiveParameter, modeFindParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRole(string user, string station, string action, Nullable<int> roleID, string description, Nullable<bool> isActive)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRole", userParameter, stationParameter, actionParameter, roleIDParameter, descriptionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSgCompany(string user, string station, string action, Nullable<int> companyID, string name, string type, Nullable<bool> isActive, string credential)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var credentialParameter = credential != null ?
                new ObjectParameter("Credential", credential) :
                new ObjectParameter("Credential", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSgCompany", userParameter, stationParameter, actionParameter, companyIDParameter, nameParameter, typeParameter, isActiveParameter, credentialParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUser(string user, string station, string action, Nullable<int> userID, string login, string password, string key, string fullName, string identification, string email, Nullable<System.DateTime> lastChangePassword, Nullable<int> daysValidity, string passwordExpires, string streetAddress, string cellPhone, string addressPhone, Nullable<int> isActive, string modeFind)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var identificationParameter = identification != null ?
                new ObjectParameter("Identification", identification) :
                new ObjectParameter("Identification", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var lastChangePasswordParameter = lastChangePassword.HasValue ?
                new ObjectParameter("LastChangePassword", lastChangePassword) :
                new ObjectParameter("LastChangePassword", typeof(System.DateTime));
    
            var daysValidityParameter = daysValidity.HasValue ?
                new ObjectParameter("DaysValidity", daysValidity) :
                new ObjectParameter("DaysValidity", typeof(int));
    
            var passwordExpiresParameter = passwordExpires != null ?
                new ObjectParameter("PasswordExpires", passwordExpires) :
                new ObjectParameter("PasswordExpires", typeof(string));
    
            var streetAddressParameter = streetAddress != null ?
                new ObjectParameter("StreetAddress", streetAddress) :
                new ObjectParameter("StreetAddress", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var addressPhoneParameter = addressPhone != null ?
                new ObjectParameter("AddressPhone", addressPhone) :
                new ObjectParameter("AddressPhone", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var modeFindParameter = modeFind != null ?
                new ObjectParameter("ModeFind", modeFind) :
                new ObjectParameter("ModeFind", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUser", userParameter, stationParameter, actionParameter, userIDParameter, loginParameter, passwordParameter, keyParameter, fullNameParameter, identificationParameter, emailParameter, lastChangePasswordParameter, daysValidityParameter, passwordExpiresParameter, streetAddressParameter, cellPhoneParameter, addressPhoneParameter, isActiveParameter, modeFindParameter);
        }
    }
}
